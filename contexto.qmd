# Contexto

## Ambiente JavaScript e Node.js

O JavaScript [@Ecma262_2023] serve como base para uma ampla variedade de iniciativas modernas em programação, incluindo o gerenciamento de dados biológicos [@Janicki2016; @LinEtAl2016; @DiPierro2018]. Sua versatilidade e ampla adoção impulsionaram o desenvolvimento de ferramentas e plataformas que exploram suas capacidades.

O [Node.js](https://nodejs.org/pt), um ambiente de execução construído sobre o motor V8 do Chrome, amplia o potencial do JavaScript além dos navegadores [@NodeJs2023]. Ele permite a execução de código JS fora dos navegadores, facilitando a criação de scripts do lado do servidor. Isso é particularmente vantajoso para tarefas que envolvem processamento de dados, requisições de API e gerenciamento de bancos de dados [@DiPierro2018]. Além disso, o Node.js oferece acesso a uma ampla gama de bibliotecas e pacotes, acelerando o desenvolvimento de bases de dados e ampliando suas funcionalidades.

JavaScript e Node.js são ferramentas poderosas no campo do gerenciamento de dados biológicos. Suas capacidades contribuem para o desenvolvimento de bancos de dados eficientes, dinâmicos e escaláveis, facilitando avanços na pesquisa em biodiversidade.

## Programação Orientada a Objetos e TypeScript

No campo em constante evolução do gerenciamento de dados biológicos, a fusão dos princípios da Programação Orientada a Objetos (POO) com o TypeScript, uma poderosa extensão da linguagem, representa um avanço significativo. A POO, um paradigma de desenvolvimento de software, gira em torno da representação de entidades do mundo real como objetos, cada um com atributos e métodos distintos [@Wegner1990; @SequeiraEtAl1997]. Essencialmente, a POO baseia-se em classes e instâncias, onde cada objeto representa uma instância de uma classe. Esse paradigma promove reutilização de código, modularidade e manutenção facilitada, oferecendo ferramentas indispensáveis para lidar com a complexidade dos dados biológicos. A integração dos princípios da POO nos sistemas de informação biológica tem sido utilizada para combinar fontes e interações de dados diversas [@SequeiraEtAl1997; @Bedathur2003; @Onkov2011; @Tylman2016].

O TypeScript, como extensão do JavaScript estreitamente ligado à POO, eleva as capacidades da linguagem ao introduzir recursos essenciais como tipagem estática e interfaces [@Typescript2023]. Essa melhoria torna o TypeScript uma ferramenta poderosa para a construção de sistemas complexos, robustos e bem organizados. Um aspecto notável do TS é sua capacidade de capturar erros em tempo de compilação, ao contrário do JS tradicional, que detecta erros em tempo de execução [@Typescript2023]. Essa característica melhora a identificação e resolução de problemas antes da execução do código, criando uma camada extra de verificação de código. Na construção e gerenciamento de bases de dados biológicas, essa detecção precoce de erros assegura a integridade dos dados e melhora a confiabilidade do sistema, especialmente em estruturas complexas e hierarquias típicas dos dados biológicos.

Nesse contexto, os métodos desempenham um papel crucial. Representando comportamentos associados às classes, eles funcionam como uma camada de validação em tempo de execução. Impõem condições e regras, garantindo a entrada de dados precisa e coerente. Por exemplo, quando a ausência de uma estrutura é declarada, como um tipo de tricoma vegetal, atribuir um tamanho a essa estrutura seria ilógico. Métodos funcionam como salvaguardas condicionais, prevenindo a entrada de dados errôneos ou incompatíveis. Assim, a qualidade e confiabilidade dos dados são significativamente aprimoradas.

A combinação dos princípios da POO com as capacidades do TypeScript cria um conjunto de ferramentas potente para estruturar e gerenciar dados biológicos. Essa fusão dinâmica facilita a criação de um ecossistema ordenado e confiável, assegurando a precisão e integridade das informações sobre biodiversidade.

De forma semelhante, o TS introduz o conceito de "açúcar sintático", aumentando a legibilidade e expressividade do código. Esse recurso adiciona elementos que facilitam a compreensão do código sem alterar seu comportamento fundamental. Por exemplo, a notação por ponto é significativamente mais intuitiva do que estruturas indentadas similares ao JSON. Esse refinamento sintático melhora a legibilidade para desenvolvedores e pesquisadores, mesmo aqueles com pouca experiência em programação. A integração do açúcar sintático harmoniza-se com os objetivos gerais do framework.

Outro exemplo convincente de açúcar sintático está na adoção de convenções linguísticas da biologia. Em vez de tipos primitivos como `true` ou `false`, ou ainda `0` ou `1`, sugerimos o uso de termos contextualizados como `yes` ou `no`, `present` ou `absent`. Essa abordagem ressoa com a linguagem utilizada nas análises comparativas das ciências biológicas. O alinhamento entre a semântica do código e os conceitos específicos da área reforça os objetivos do framework, promovendo um ambiente amigável voltado ao avanço da pesquisa em biodiversidade.

## Banco de Dados Orientado a Documentos e JSON

A mudança de paradigma introduzida pelos bancos orientados a documentos (DOD) e a adoção do formato JSON tiveram um impacto profundo na gestão de dados biológicos. Ao contrário dos bancos relacionais tradicionais, os DOD armazenam dados como documentos independentes, abraçando a complexidade sem abrir mão da flexibilidade [@SequeiraEtAl1997; @Chai2013; @KarnitisArnicans2015; @ChickerurEtAl2015; @Olivera2015; @ThomasMason2015; @BaaziziEtAl2019]. Em um DOD não relacional, cada linha de uma planilha representa um documento no banco de dados, enquanto cada coluna representa uma propriedade desses documentos.

No cerne dessa transformação está o formato JSON, uma estrutura versátil e hierárquica capaz de acomodar dados diversos em um ambiente sem esquema fixo. Essa flexibilidade permite armazenar dados semiestruturados sem as limitações das tabelas predefinidas dos bancos relacionais [@BaaziziEtAl2019]. Assim, nuances que frameworks rígidos não conseguem capturar são representadas de forma mais precisa. A compatibilidade do JSON com as complexidades dos dados biológicos resulta numa representação mais rica e fiel das características biológicas. Isso contrasta fortemente com as dificuldades encontradas nos bancos relacionais para representar essas relações complexas sem estruturas convolutas e junções.

Embora os bancos relacionais sejam amplamente utilizados, inclusive na biologia, eles não oferecem a legibilidade que se alinha ao pensamento humano. A transição do pensamento bidimensional das planilhas para a notação hierárquica do JSON é claramente vantajosa, permitindo lidar melhor com a complexidade e criando uma estrutura mais legível e gerenciável.

A base estrutural de um DOD consiste em um array de objetos, cada um tratado como um documento. Esse array constitui o banco de dados e exige robustas capacidades de consulta. Cada objeto recebe um índice específico. Ao trabalhar com DOD, nosso objetivo principal é navegar por todos os níveis da estrutura JSON. Isso envolve identificar o índice da consulta e o caminho no JSON que leva até ele. Esse duplo processo de recuperação proporciona um método preciso para acessar os dados desejados. Assim, o índice do documento e o caminho JSON são ferramentas fundamentais para navegação e consulta eficiente.

No JSON, um objeto é composto por pares chave-valor. A chave identifica exclusivamente um dado, e o valor representa a informação atribuída. Os valores podem incluir strings, números, booleanos, arrays, objetos JSON aninhados ou `null`. Essa estrutura facilita a organização e recuperação de dados com clareza.

Outro ponto relevante é a contribuição do JSON para simplificar consultas. Utilizando a notação JSON, pesquisadores podem recuperar dados de forma eficiente. Bancos como o MongoDB ([https://www.mongodb.com/](https://www.mongodb.com/)) aproveitam o JSON para facilitar consultas e manipulação de dados, embora outras ferramentas neutras também possam ser utilizadas como linguagens de consulta.

## Documentação e TSDoc

A documentação desempenha um papel essencial no armazenamento de informações sobre objetos, destacando seus atributos e valores. Isso é especialmente importante ao construir uma base de dados robusta com organização eficiente de metadados [@Spinellis2010; @Rai2022; @Warren2017].

Criar documentação detalhada estabelece um guia de referência abrangente, descrevendo com precisão cada classe e seus atributos.

O [TSDoc](https://tsdoc.org/) funciona como uma ferramenta valiosa nesse contexto, oferecendo anotações padronizadas que esclarecem os atributos, incluindo seu tipo e finalidade. Isso promove consistência, auxiliando os colaboradores a entender o propósito de cada elemento.

Uma documentação sólida é essencial para desenvolver uma base de dados confiável. Ela assegura entradas corretas e mantém a integridade do sistema. Também facilita o trabalho em equipe, reduz erros e melhora a precisão dos dados.

Ao abordar a documentação em metadados e bancos de dados, constrói-se um framework que apoia a compreensão abrangente de objetos, atributos e métodos. A inclusão de anotações TSDoc aumenta essa clareza, padronizando descrições e tornando o acesso mais fácil.

## Ambiente de Desenvolvimento Integrado e Visual Studio Code

Um Ambiente de Desenvolvimento Integrado (IDE) é fundamental no desenvolvimento moderno, oferecendo ferramentas para codificação, depuração e colaboração. O VS Code ([https://code.visualstudio.com/](https://code.visualstudio.com/)), da Microsoft, é um dos IDEs mais populares, conhecido por sua adaptabilidade e eficácia.

Seu grande diferencial está na interface amigável e em sua capacidade de ser personalizado com extensões, cobrindo tarefas diversas em projetos TypeScript e além.

No nosso projeto, o VS Code é essencial para manipular dados biológicos no formato JSON. Integrando TS e Node.js, o IDE garante a manutenção e adaptabilidade do código — algo crucial para as demandas em evolução da pesquisa em biodiversidade. Outros IDEs também são capazes de cumprir essas funções.

O VS Code ainda conta com controle de versão integrado, baseado em Git e GitHub. Isso facilita o compartilhamento, revisão e rastreamento de alterações, promovendo transparência e colaboração.

A integração entre OOP, TS e JSON dentro do VS Code amplia as possibilidades de processamento, análise e uso dos dados biológicos, com simplicidade e eficiência, evitando a criação de softwares opinativos e favorecendo um framework robusto e adaptável.

## Controle de Versão com Git e GitHub

O uso estratégico de controle de versão contribui para um ambiente colaborativo e coerente. O [GitHub](https://github.com/), amplamente utilizado, integra-se ao VS Code, aumentando a eficiência e transparência [@Blischak2016; @PerezRiverol2016; @CrystalOrnelas2021].

Essa integração permite que pesquisadores colaborem facilmente, rastreando alterações e gerenciando contribuições. Os recursos de ramificação, pull requests e merge promovem colaboração eficiente, evitando erros e garantindo que as mudanças sejam testadas antes de entrar no código principal.

As *branches* permitem o desenvolvimento paralelo de diferentes aspectos da representação biológica. Já os *pull requests* viabilizam discussões e revisão de alterações, promovendo qualidade e transparência. O *merge* unifica essas contribuições, garantindo uma base coesa e fiel.

O uso de rastreadores de *issues*, como o Git Issues, permite lidar com desafios na representação de conceitos biológicos. Ele organiza tarefas, diálogos e decisões, promovendo colaboração eficaz e melhoria contínua.

O uso de *Conventional Commits* ([https://www.conventionalcommits.org/](https://www.conventionalcommits.org/)) melhora a clareza das mensagens de commit e facilita a criação de históricos de mudanças automáticos. Isso torna o processo de revisão mais eficiente.

Essa abordagem colaborativa tem grande potencial para impulsionar a pesquisa em biodiversidade e sistemática, promovendo inovação, escalabilidade e eficiência no desenvolvimento de bancos de dados biológicos.

## Exploração do Banco de Dados

Explorar novas abordagens em DOD é essencial. Esses bancos oferecem flexibilidade para lidar com dados não estruturados e semiestruturados — uma vantagem para estruturas de dados imprevisíveis ou em evolução. Eles representam diretamente hierarquias, arrays e documentos aninhados, e oferecem frameworks de agregação potentes.

Consultas sofisticadas são fundamentais. O [MongoDB](https://www.mongodb.com/) exemplifica essa abordagem. Sua capacidade de lidar com esquemas adaptáveis e relações complexas está alinhada com as necessidades da análise biológica.

Diversas bibliotecas facilitam consultas em JSON: JsonPath, Underscore e Lodash, por exemplo. Cada uma possui abordagens distintas, o que pode complicar a padronização. Ainda assim, oferecem alternativas valiosas para consultas eficientes.

Técnicas padrão de consulta em DODs geralmente exigem o caminho completo das chaves. No entanto, nossa necessidade é diferente: queremos localizar pares chave-valor como `{"trichomes.setiform.are": "present"}` ou `{"obtainingMethod": "SEM"}`, independentemente da posição estrutural. Para isso, desenvolvemos uma função recursiva capaz de percorrer todos os níveis de um JSON, oferecida no TypeTaxonScript com o comando `findProperty`.
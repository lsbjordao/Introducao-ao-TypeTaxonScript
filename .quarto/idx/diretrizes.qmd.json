{"title":"Diretrizes Padrão","markdown":{"headingText":"Diretrizes Padrão","containsRefs":false,"markdown":"\nAs recomendações padrão servem como a base sobre a qual estabelecemos um ambiente de desenvolvimento coeso e estruturado. Ao seguir diligentemente essas normas e recomendações, estabelecemos as bases para um ecossistema de desenvolvimento que não apenas facilita a comunicação clara, a colaboração e práticas de codificação intuitivas, mas também se alinha aos domínios específicos do desenvolvimento em TypeScript (TS) e da gestão de dados de biodiversidade.\n\nNeste banco de dados, cada pedaço de informação deve ser organizado dentro de uma **classe** predefinida. Por exemplo, **táxons**, **caracteres** e **fontes** são representados como classes, cada uma armazenada em seu próprio arquivo `.ts`.\n\nA estrutura subjacente dos organismos, conforme delineada por taxonomistas e biólogos, é abstraída em uma **árvore hierárquica de caracteres**. Essa hierarquia é refletida em uma **organização aninhada de diretórios**, cada um contendo arquivos `.ts`. Os caracteres biológicos são encapsulados como classes.  \n\n- Se uma classe que descreve um caráter **depender de outras classes**, ela é implementada como um **diretório com o nome da classe**, contendo um arquivo `index.ts` (por exemplo, a classe `Flower`, que importa outras classes, é definida em `Flower/index.ts`). Esse `index.ts` é importado e exportado usando o nome do diretório, referenciando implicitamente o arquivo `index.ts`.\n- Se uma classe que descreve um caráter **não possuir dependências**, ela é representada por um único arquivo `.ts` com o nome da classe (por exemplo, `Calyx.ts`).\n\nAs interconexões entre esses componentes são estabelecidas por meio dos mecanismos de **importação e exportação de módulos**.\n\nPor exemplo, em nosso banco de dados pré-construído, o gênero **Mimosa L.** é exemplificado por uma classe chamada `Mimosa`. Essa classe é acompanhada por um arquivo `index.ts` dentro do diretório `Mimosa`, oferecendo uma descrição abrangente da classe `Mimosa`. Da mesma forma, os atributos de uma **folha** são descritos dentro de um único arquivo `index.ts` no diretório correspondente.\n\nO processo de inserção de dados ocorre dentro do arquivo da espécie correspondente. Cada pedaço de informação é acomodado em um **objeto** que está alinhado a uma classe específica. Esses objetos são ajustados para interagir de forma fluida com suas respectivas classes, facilitando o armazenamento organizado dos dados no banco de dados.  \nO primeiro passo consiste na **instanciação de um objeto**, seguido pelo **preenchimento desse objeto com dados**. Esse processo é fundamental para o acesso aos atributos e métodos do objeto associado à classe instanciada durante a compilação. Ele também permite a utilização de ferramentas de autocompletar. No código, uma nova instância de classe é criada da seguinte maneira: `new NomeDaClasse()`.\n\nA modelagem de classes constitui uma tarefa fundamental dentro deste banco de dados. Ela envolve a definição de **atributos** e **métodos**. Embora exija esforço de codificação, essa prática é essencial para definir corretamente os tipos de dados aceitos por cada atributo (ou propriedade).\n\nAs **fontes** são representadas como instâncias da classe `Sources` e podem ser associadas a táxons ou caracteres específicos. A instanciação de fontes, no entanto, é realizada por meio da função `extends` no TypeScript. Essa decisão de design assegura que todas as classes no banco de dados possam incorporar uma fonte. A classe `Sources` funciona como um **repositório** para estabelecer conexões entre fontes bibliográficas — incluindo elementos como imagens ou outros formatos de dados — e as estruturas distintas dos organismos.\n\n## Convenções de Nomeação de Diretórios e Arquivos\n\nNa raiz do projeto, encontramos os diretórios `taxa` e `characters`, que servem como repositórios para nosso banco de dados de gêneros e espécies, juntamente com suas características, representadas como uma árvore de caracteres.\n\nDentro do diretório `characters`, estabelecemos uma hierarquia aninhada de características relacionadas ao corpo do organismo, ou seja, a árvore de caracteres. Os caracteres são organizados em diretórios de acordo com sua hierarquia. Cada nível de hierarquia é encapsulado dentro de um diretório que leva o nome da classe, acompanhado de um arquivo `index.ts`.  \nDentro deste arquivo `index.ts`, as classes utilizadas no seu escopo são tanto importadas quanto exportadas. No nível mais alto do diretório `characters`, encontramos os caracteres iniciais, como: `stems` (caules), `leaves` (folhas), `trichomes` (tricomas), `prickles` (acúleos), `inflorescence` (inflorescência), `flowers` (flores), `fruits` (frutos) e `seeds` (sementes).  \n\nEm situações em que uma classe não depende de nenhuma outra, o nome do arquivo corresponde ao nome da classe, com a inicial maiúscula (por exemplo, `Calyx.ts`).\n\nDentro do diretório `taxa`, geramos subdiretórios nomeados de acordo com o epíteto genérico (por exemplo, *Mimosa*). Em cada um desses subdiretórios, é gerado um arquivo `index.ts`. Este arquivo é responsável por importar todas as classes de caracteres utilizadas para descrever os atributos de uma espécie pertencente ao respectivo gênero, contribuindo assim para a estrutura abrangente do nosso banco de dados.  \nA organização sistemática é aprimorada detalhando cada espécie individual em um arquivo `.ts` distinto, localizado dentro do diretório correspondente ao gênero (por exemplo, `./Taxa/Mimosa/Mimosa_sevilhae.ts`).\n\n## Árvore de Caracteres\n\nUm banco de dados pré-construído, que contém a árvore de caracteres localizada no diretório `characters`, foi criado com base em pesquisas taxonômicas envolvendo o gênero *Mimosa* (Leguminosae, Caesalpinoideae) [@Jordao2014; @JordaoEtlAl2017; @JordaoEtAl2018; @Jordao2020].  \nConforme a tradição, este banco de dados é inicialmente disponibilizado como a **versão 1**. Projetos futuros que sigam esses padrões podem usar este projeto como ponto de partida.\n\n## Descrição do Gênero\n\nDentro do diretório do gênero, o arquivo `index.ts` deve contemplar a importação de todos os caracteres localizados no primeiro nível da árvore de caracteres, declarando-os como atributos.  \nObserve que os caracteres importados, como `Stems` e `Leaf`, são descritos em arquivos `.ts` dedicados dentro do diretório `characters`.\n\nAs linhas iniciais de código envolvem a importação de todos os caracteres definidos no primeiro nível da árvore de caracteres, juntamente com as classes de anotação. Em seguida, realiza-se a tarefa de criação da classe `Mimosa`.  \nAo estender a classe `Sources`, permite-se associar uma fonte diretamente a uma espécie, diferenciando-se da associação de fontes a partes componentes, como caracteres na árvore de caracteres.  \nÉ importante não esquecer de exportar a classe `Mimosa`.  \n\nVeja o exemplo:\n\n```ts\n// Importar caracteres\nimport {\n    Stems,\n    Leaf,\n    // outras classes do primeiro nível da árvore de caracteres\n} from '././characters/v1'\n\n// Importar classes de anotação\nimport { Sources } from '././characters/v1/Sources'\nimport { DescriptionAuthorship } from '././characters/v1/descriptionAuthorship'\n\nexport class Mimosa extends Sources {\n    specificEpithet: string\n    habit: 'tree' | 'shrub' | 'subshrub' | 'herb'\n    stems: Stems\n    leaf: Leaf\n    // outros atributos\n\n    constructor() {\n        super()\n    }\n}\n```\n\nNo trecho de código fornecido, vale enfatizar que, conforme convencionalmente entendido, as linhas iniciadas com `//` são utilizadas exclusivamente para comentários dentro do código.\n\n## Descrição de espécies\n\nInformações completas sobre uma espécie são cuidadosamente armazenadas em um arquivo `.ts` individual dentro do diretório correspondente ao seu gênero. Para descrever uma espécie, é necessário importar a classe do gênero *Mimosa*, importar as classes de caracteres, descrever a espécie utilizando os caracteres importados e, por fim, exportar a classe que representa essa espécie descrita. Essa estrutura também pode acomodar outros táxons infraespecíficos no banco de dados.  \nA classe `Mimosa` funciona como o módulo central para a construção de todas as espécies de Mimosa, abrangendo a montagem da respectiva árvore de caracteres.\n\n## Importação de módulos\nAs primeiras linhas de código envolvem a importação de táxons, caracteres e classes de anotações. Para importar, utilize a seguinte sintaxe:\n\n```ts\n// Importar gênero Mimosa\nimport { Mimosa } from '.'\n\n// Importar caracteres\nimport { Stems, Trichomes } from '././characters/v1'\nimport { Capitate } from '../../characters/v1/Trichomes'\nimport { CapitateFiliform } from '../../characters/v1/Trichomes/Capitate'\n\n// Importar classes de anotação\nimport { Source, DescriptionAuthorship } from '../../characters/v1'\n```\n\nPara um processo de importação mais organizado, pode-se utilizar a técnica de desestruturação de objetos, permitindo a aquisição eficiente de classes de módulos interconectados.\n\n## Descrição\n\nAo descrever uma espécie, recomenda-se criar uma constante utilizando a seguinte sintaxe: `Mimosa_osmarii`.  \nEmbora variáveis em JavaScript geralmente usem *camelCase*, no desenvolvimento de um banco de dados de biodiversidade, sugere-se usar *snake_case* para variáveis que armazenam descrições. Além disso, para respeitar as regras de nomenclatura biológica, o nome do gênero deve ser capitalizado — ou seja, um *Snake_case*.\n\nUse notação de ponto (*dot notation*) para criar objetos dentro de objetos. Essa notação melhora a legibilidade do código e é considerada uma \"açúcar sintático\".\n\nPara instanciar uma classe como um objeto na descrição, é necessário fazer a instanciação dentro de um objeto que aceite a classe instanciada. No exemplo abaixo, o código funciona porque a classe `Mimosa` possui o atributo `specificEpithet`, que recebe um valor do tipo primitivo `string`:\n\n```ts\n// Descrição de Mimosa leptantha\nconst Mimosa_leptantha = new Mimosa()\nMimosa_leptantha.specificEpithet = 'leptantha'\n```\n\nÉ importante instanciar cada classe aninhada antes de declarar um atributo. Para descrever adequadamente a presença ou ausência de características específicas, é necessário seguir convenções precisas.  \nOs termos `is` e `are` servem como sinônimos para indicar a presença ou ausência da característica com base em nomes de objetos singulares ou plurais. Recomenda-se indicar a presença ou ausência imediatamente após a instanciação da nova classe:\n\n```ts\nMimosa_leptantha.stems = new Stems()\nMimosa_leptantha.stems.trichomes = new Trichomes()\nMimosa_leptantha.stems.trichomes.capitate = new Capitate()\nMimosa_leptantha.stems.trichomes.capitate.filiform = new CapitateFiliform()\nMimosa_leptantha.stems.trichomes.capitate.filiform.are = 'present'\n```\n\nCom base no exemplo acima, estamos afirmando a presença de tricomas capitado-filiformes nos caules de *Mimosa leptantha* Benth., no banco de dados.\n\n## Anotações\n\nRecomenda-se fortemente que as anotações sejam declaradas por último — mas, claro, antes da exportação da descrição da espécie.  \nApós a descrição, é importante adicionar o autor da descrição utilizando o atributo `descriptionAuthorship`, que recebe o nome e uma data em *timestamp* Unix (contagem de segundos desde 00:00:00 UTC de 01 de janeiro de 1970).\n\n```bash\n// Autoria da descrição\nMimosa_leptantha.descriptionAuthorship = new DescriptionAuthorship()\nMimosa_leptantha.descriptionAuthorship.addAuthor({\n  name: 'June Doe',\n  date: 1692107172\n})\n```\n\nA classe `Source` foi modelada para armazenar citações no estilo *bibtex*, mas acrescentamos o atributo `obtainingMethod`, que pode ter um dos seguintes valores: `nakedEyes`, `stereoscope`, `opticalMicroscope`, `scanningElectronMicroscope`, `tranmissionElectronMicroscope`, `photo`, `drawing`.\n\nPara adicionar uma fonte e vincular a publicação à parte da planta, primeiro precisamos criar uma constante que armazenará a classe `Source`, e então usar o método `addSource()`:\n\n```ts\n// Fontes\n\n/// Tricomas\nconst source1 = new Source()\nsource1.sourceType = 'article'\nsource1.authorship = 'Jordão, L.S.B. & Morim, M.P. & Baumgratz, J.F.A.'\nsource1.year = '2020'\nsource1.title = 'Trichomes in *Mimosa* (Leguminosae): Towards a characterization and a terminology standardization'\nsource1.journal = 'Flora'\nsource1.number = '272'\nsource1.pages = '151702'\nsource1.figure = '9I, J, K, L'\nsource1.obtainingMethod = 'scanningElectronMicroscope'\n\nMimosa_leptantha.stems.trichomes.capitate.filiform.addSource(source1)\n```\n\n## Exportação de módulos\n\nEmbora existam diversas formas de exportar módulos em JS e TS, uma prática padrão é garantir que a espécie esteja completamente descrita, e que a última linha do arquivo seja a exportação da variável.  \nEssa abordagem melhora a legibilidade e a manutenção do código:\n\n```ts\n// Exportar Mimosa leptantha\nexport { Mimosa_leptantha }\n```\n\n## Modelagem de classes de caracteres\n\nEm TypeScript, as classes de caracteres são estruturadas como classes propriamente ditas. O nome da classe segue a convenção PascalCase e é definido usando a sintaxe: `class Fruit {}`.\n\nAo importar uma classe para a descrição de caracteres, é crucial evitar nomes duplicados. Assim, torna-se necessário lidar com a ocorrência de nomes de personagens repetidos.\n\nNos casos em que uma estrutura tem nomes com hífens, como 'setiform-capitate' ou 'stellate-lepidote', o nome da classe começa com a primeira palavra. Nesses casos, ela é transformada em `SetiformCapitate` e `StellateLepidote`.\n\nPara classes com nomes genéricos como 'abaxial', 'adaxial' ou 'margin', a prática recomendada é começar com o nome comum seguido da estrutura anatômica correspondente. Por exemplo, `AbaxialLeaflet` e `MarginBracteole`.\n\nOs nomes de atributos dentro das classes seguem o padrão camelCase e são definidos com a sintaxe: `numberOfPairs: number`. Isso reflete os pares chave-valor característicos de objetos JSON.\n\nOs atributos podem incluir diferentes tipos de dados, como strings e números. Veja alguns exemplos ilustrativos:\n\nDefinindo um atributo `specificEpithet` da classe `Mimosa` que armazena um valor do tipo string:\n\n```ts\nclass Mimosa {\n    specificEpithet: string\n}\n```\n\nDefinindo um atributo `numberOfPairs` para a classe `Pinnae`, com valor do tipo number:\n\n```ts\nclass Pinnae {\n    numberOfPairs: number\n}\n```\n\nApresentando tipos alternativos para um atributo usando o símbolo de barra vertical (`|`):\n\n```ts\nclass Replum {\n    shape: 'straight' | 'undulate'\n}\n```\n\nPermitindo versatilidade para um caráter multivalorado com `(valor | valor | valor)[]`:\n\n```ts\nclass Leaflet {\n    shape:\n        'linear' |\n        'lanceolate' |\n        'elliptic' |\n        'oval' |\n        (\n            'linear' |\n            'lanceolate' |\n            'elliptic' |\n            'oval'\n        )[]\n}\n```\n\nApós descrever os atributos da classe, é necessário invocar a função `constructor() {}` para instanciar cada atributo assim que o módulo for importado em outro local.\n\nOs métodos da classe são listados após o construtor. Na hora de nomear métodos para caracteres e documentar sua funcionalidade, é essencial manter uma abordagem consistente e informativa. Optamos por evitar o uso de funções nativas para favorecer a intuitividade. Os nomes dos métodos seguem um formato padronizado, como o uso de `add` para métodos como `addSource`. Ao especificar dados, utiliza-se `set`, como em `setLength`, para garantir uniformidade e clareza.\n\nNeste código, foi desenvolvido um conjunto de métodos para gerenciar medidas de diferentes dimensões — especificamente comprimento, altura e largura. Esses métodos permitem definir e manipular precisamente essas medidas para diversos objetos. Aceitando valores numéricos, as funções `setLength`, `setHeight` e `setWidth` definem individualmente as dimensões principais. Além disso, as funções `_setLengthMinMax`, `setHeightMinMax` e `setWidthMinMax` permitem especificar intervalos, considerando valores mínimos e máximos. As funções `setLengthRarelyMin` e `setLengthRarelyMax` permitem a entrada de valores mínimos e máximos usados ocasionalmente — o mesmo vale para altura e largura. Esses métodos, em conjunto, contribuem para um framework abrangente de gerenciamento de atributos dimensionais, conforme condições e restrições específicas que podem ser verificadas em tempo de execução.\n\nPor fim, durante a exportação, se uma classe possuir atributos que são outras classes com seus próprios atributos — formando um padrão aninhado — é necessário exportar não apenas a classe criada, mas também cada atributo importado. Isso garante a coerência de importações e exportações entre módulos.\n\n## Documentação em TypeScript\n\nEste documento fornece diretrizes para documentar descrições de táxons, cobrindo tanto tags obrigatórias quanto opcionais. Campos obrigatórios incluem o nome do autor e a data, os quais atribuem a devida autoria à descrição.\n\nO processo de documentação utiliza TSDoc. A primeira linha deve servir como título da classe. Para ampliar as descrições de classes, pode-se usar a tag `@remarks`. Vários elementos de marcação Markdown funcionam dentro do TSDoc, e tópicos podem ser adicionados iniciando a linha com um hífen `-`.\n\nUma tag essencial é `@source`, que permite a adição de referências bibliográficas. Dentro da tag `@source`, a notação Markdown para links HTML, como `[rótulo](link)`, pode ser usada de forma eficaz. Assim, URLs com DOI podem ser citadas para estabelecer links diretos no banco de dados.\n\n### Documentação de Táxon\n\nAo documentar os atributos de um gênero, recomenda-se incluir o nome do gênero na primeira linha de cada bloco TSDoc.\n\nAntes da seção `constructor() {}`, é aconselhável declarar \"Creates an instance of \\[class]\". Essa prática reforça os princípios da POO. Nosso banco de dados contém exclusivamente uma classe de táxon, `Mimosa`, que representa um gênero. Para documentar essa classe, é utilizada uma sintaxe especializada:\n\n```ts\nexport class Mimosa extends Sources {\n    /**\n     * Espécies de *Mimosa*\n     */\n    specificEpithet: string\n\n    /**\n     * Hábito de *Mimosa*\n     */\n    habit: 'tree' | 'shrub' | 'subshrub' | 'herb'\n\n    /**\n     * Caule de *Mimosa*.\n     */\n    stems: Stems\n\n    /**\n     * Acúleos de *Mimosa*.\n     */\n    prickles: Prickles\n\n    /**\n     * Folha de *Mimosa*: bipinada\n     */\n    leaf: Leaf\n\n    /**\n     * Cria uma instância da espécie *Mimosa*.\n     */\n    constructor() {\n        super()\n    }\n}\n```\n\nPara a descrição do gênero, a documentação dos principais caracteres pode ser armazenada assim:\n\n```ts\nexport class Mimosa extends Sources {\n    /**\n     * Tricomas de *Mimosa*.\n     *\n     * @remarks\n     * Os tricomas em *Mimosa* podem ser classificados nos seguintes tipos:\n     * - **filiforme**\n     * - **setiforme**\n     * - **estrelado**\n     * - **dendrítico**\n     * - **prostrado**\n     * - **fasciculado**\n     * - **verruciforme**\n     * - **lepidoto**\n     * - **granular**\n     * - **capitado-filiforme**\n     * - **capitado-setiforme**\n     *\n     * @source [Jordão et al. (2020)](https://doi.org/10.1016/j.flora.2020.151702)\n     * @source [Santos-Silva et al. (2013)](https://doi.org/10.11646/phytotaxa.119.1.1)\n     */\n    trichomes: Trichomes\n\n    /**\n     * Cria uma instância da espécie *Mimosa*.\n     */\n    constructor() {\n        super()\n    }\n}\n```\n\n### Documentação de Caracteres\n\nPara documentar uma classe de caráter, recomenda-se incluir o nome da classe-pai em cada atributo. Dentro de `@remarks`, considere listar os tipos de atributo como tópicos separados e destacá-los com **negrito**. Após o `:`, forneça uma explicação descritiva. Essa abordagem garante clareza e descrição completa dos tipos.\n\nComo ilustrado no exemplo abaixo, o nome do atributo é reiterado e vinculado à classe associada. Essa prática garante coesão na montagem dos objetos dentro da árvore de caracteres:\n\n```ts\nexport class Epicarp extends Sources {\n    /**\n     * Tipo de epicarpo.\n     */\n    type: 'monospermic' | 'undivided'\n\n    /**\n     * Margem do epicarpo.\n     *\n     * @remarks\n     * A margem do epicarpo pode ser: 'reta' ou 'ondulada':\n     * - **straight**: A margem do epicarpo é reta e não ondulada.\n     * - **undulate**: A margem do epicarpo é ondulada e não reta.\n     */\n    margin: 'straight' | 'undulate'\n\n    /**\n     * Cria uma instância de Epicarp.\n     */\n    constructor() {\n        super()\n    }\n}\n```\n\n## Exportação do Banco de Dados\n\nPara exportar o banco de dados em formato JSON, apresentamos um método que envolve a recuperação de todos os arquivos de espécies do diretório do gênero e sua organização em um array de objetos. Adicionalmente, implementamos uma camada de validação que verifica e remove duplicatas dentro desses arrays, mas outras validações podem ser implementadas.\n\nA classe `Sources`, representada como um array de objetos, pode estar presente em todas as profundidades dentro da descrição dos táxons e da árvore de caracteres. Para facilitar a recuperação e consulta de dados, especialmente dados relacionados às fontes, incluímos um método para exportar um banco de dados de fontes. Esse banco permite recuperar informações posicionais (como índice e caminho JSON) dentro do banco de dados principal. Essas informações são particularmente úteis para localizar exatamente o caráter associado a uma fonte específica.\n\n## Versionamento com Git\n\nNo contexto do versionamento com Git, as mensagens de *commit* podem seguir uma semântica padronizada para garantir uma comunicação clara — e até permitir certa automação dentro do sistema Git.\n\n### Adicionando um novo táxon\n\nEm cenários onde uma nova entrada taxonômica é inserida no banco de dados, o formato sugerido para a mensagem de *commit* é o seguinte:\n\n```bash\nfeat(taxon): Add taxon \"Mimosa osmarii\"\n\nAdd taxon to the database.\n```\n\nEsse formato resume de forma concisa a essência do *commit* ao encapsular a ação (\"Add\"), a entidade afetada (\"taxon\") e o nome específico da entidade (\"Mimosa osmarii\"). A descrição complementar fornece mais contexto, garantindo que outros desenvolvedores compreendam a natureza da adição.\n\n### Atualizando dados de um táxon\n\nQuando atualizações são feitas nos dados de um táxon já existente, a estrutura da mensagem de *commit* segue este padrão:\n\n```bash\nfeat(taxon): Update taxon \"Mimosa osmarii\"\n\nUpdate data of taxon in the database.\n```\n\nEssa estrutura comunica de forma clara a alteração feita (\"Update taxon\"), especifica o táxon modificado (\"Mimosa osmarii\") e fornece uma breve descrição da modificação.\n\n### Adicionando um novo caráter\n\nA introdução de novos caracteres no banco de dados segue uma lógica semântica semelhante:\n\n```bash\nfeat(character): Add character \"Leaf\", \"Petiole\"\n\nAdd character(s) to the database.\n```\n\nO identificador \"feat(character)\" indica a adição de um caráter, seguido pelos nomes dos caracteres. A descrição associada esclarece a ação executada.\n\n### Atualizando um caráter\n\nA atualização de informações de caracteres existentes também segue essa estrutura:\n\n```bash\nfeat(character): Update character \"Leaf\", \"Petiole\"\n\nUpdate character(s) in the database.\n```\n\nA consistência na estrutura permite uma compreensão rápida da alteração (\"Update character\"), identifica os caracteres modificados (\"Leaf\" e \"Petiole\") e resume brevemente a atualização realizada.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"output-file":"diretrizes.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","bibliography":["references.bib"],"theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"diretrizes.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}
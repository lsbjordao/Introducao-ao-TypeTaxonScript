{"title":"Tutorial","markdown":{"headingText":"Tutorial","containsRefs":false,"markdown":"\n## Instalar o Node.js\n\nAntes de começar, certifique-se de que o Node.js está instalado no seu sistema. O Node.js é essencial para executar aplicações JavaScript na sua máquina. Você pode baixá-lo e instalá-lo no site oficial do Node.js: [https://nodejs.org/](https://nodejs.org/).\n\n## Instalar o Visual Studio Code\n\nO Visual Studio Code (VS Code) é um editor de código versátil que oferece uma interface amigável e uma variedade de extensões para melhorar o desenvolvimento. Baixe e instale o VS Code pelo site oficial: [https://code.visualstudio.com/](https://code.visualstudio.com/).\n\n## Clonar o repositório do GitHub no VS Code\n\nPara clonar o repositório do projeto Mimosa para o TTS a partir do GitHub, siga estes passos:\n\n1. No VS Code, abra o *Command Palette* com `Ctrl + Shift + P` (Windows/Linux) ou `Cmd + Shift + P` (macOS).\n2. Digite `Git: Clone` e selecione a opção que aparecer.\n3. Um campo de texto será exibido no topo da janela. Insira a URL do repositório:\n   `https://github.com/lsbjordao/TTS-Mimosa`\n4. Escolha um diretório local onde deseja salvar o repositório.\n\n**Recomendamos fortemente evitar espaços ou caracteres incomuns no caminho escolhido para evitar problemas ao abrir arquivos clicando no terminal do IDE.**\n\n## Abrir o diretório do projeto TTS no VS Code\n\n1. Clique em *Arquivo* no menu superior.\n2. Selecione *Abrir Pasta*.\n3. Navegue até o local onde está o diretório do projeto TTS (ex: TTS-Mimosa).\n4. Selecione o diretório e clique em *Abrir*.\n\n## Instalar o pacote TTS\n\nNo VS Code, abra o terminal e execute o comando na raiz do projeto, onde está o `package.json`:\n\n1. Vá ao menu superior e clique em *Terminal* → *Novo Terminal*.\n2. Digite e execute:\n\n```bash\nnpm install -g type-taxon-script\n```\n\nInstale com a flag `-g` para evitar que dependências sejam criadas dentro do diretório do projeto. Caso contrário, será gerada uma pasta `./node_modules` e um arquivo `package.json` localmente.\n\nPara verificar se a instalação foi bem-sucedida, use:\n\n```bash\ntts --version\n```\n\nPara ver a ajuda com todos os comandos disponíveis:\n\n```bash\ntts --help\n```\n\n## Desinstalar o pacote TTS\n\nPara desinstalar o pacote TTS, use:\n\n```bash\nnpm uninstall -g @lsbjordao/type-taxon-script\n```\n\n## Inicializar um projeto TTS\n\nPara iniciar um projeto TTS:\n\n```bash\ntts init\n```\n\nEsse comando verifica se há um projeto existente e cria os diretórios obrigatórios `./input` e `./output`, mas **somente** se as pastas `characters` e `taxon` já existirem.\n\n## Descrever um novo táxon\n\nPara criar um novo arquivo `.ts` com a hierarquia completa de caracteres, use:\n\n```bash\ntts new --genus Mimosa --species epithet\n```\n\nUm arquivo chamado `Mimosa_epithet.ts` será gerado no diretório `./output`. **Antes de editar**, mova esse arquivo para a pasta `./taxon`, pois o script só funciona corretamente dentro dela. Fora dessa pasta, ocorrerão erros de dependência.\n\n## Importar de um arquivo .csv\n\nTambém é possível importar dados de múltiplos táxons a partir de um `.csv`, com o comando:\n\n```bash\ntts import --genus Mimosa\n```\n\nO arquivo `.csv` deve:\n\n* Usar `;` como separador e `\"` como delimitador de texto\n* Ter pelo menos a coluna `specificEpithet`\n* Usar o caminho JSON completo como nome de cada coluna\n\nPara indicar múltiplos estados em uma célula, use:\n\n```bash\n['4-merous', '5-merous']\n```\n\nPara características que são objetos-chave (ex: tipos de inflorescência), crie colunas como `inflorescence.capitate` e insira `yes` na célula correspondente ao táxon.\n\nOs arquivos `.ts` gerados serão salvos em `./output`, mas devem ser movidos manualmente para `./taxon` para funcionar corretamente.\n\n## Documentação\n\nTodos os elementos do código têm metadados (@fig-tsdoc). Ao passar o cursor sobre eles no VS Code, as informações aparecem em um *popup*.\n\n![Ao passar o cursor sobre um texto em uma IDE como o VS Code, um pop-up exibirá seus metadados.](./images/tsdoc.png){#fig-tsdoc}\n\n## Edição de táxons\n\nPara editar um arquivo `.ts` de espécie:\n\n* Digite `'` ou `\"` após o sinal `=` para ver as opções de atributos (@fig-characters-options)\n* Pressione `Enter` para confirmar\n* O VS Code oferece autocompletar com os estados válidos de cada propriedade\n\n![O VS Code auxilia com sua ferramenta de autocompletar, exibindo todos os estados permitidos para cada propriedade.](./images/characterOptions.png){#fig-characters-options}\n\n## Referência cruzada\n\n* Ao segurar `Ctrl` e clicar em uma classe, o arquivo com a descrição da classe é aberto automaticamente.\n* Também é possível ver onde cada classe é utilizada em outras partes do código.\n* Isso ajuda a navegar rapidamente pela hierarquia de caracteres.\n\nAlém disso, temos a capacidade de rastrear onde uma determinada classe está sendo utilizada. Por exemplo, ao procurar por ocorrências do uso de uma classe de caractere, podemos simplesmente inspecionar o nome da classe. Como ilustrado no exemplo, uma galha (`Gall`) é mencionada na descrição de *Mimosa gemmulata* Barneby, e ao clicar sobre ela, podemos abrir rapidamente seu respectivo arquivo (@fig-cross-reference).\n\n![O cruzamento de dependências entre módulos ajuda a identificar rapidamente onde um caractere é invocado, enquanto o VS Code rastreia e exibe com eficiência o uso de cada caractere da árvore de caracteres.](./images/whereClass.png){#fig-cross-reference}\n\n## Edição multilinha\n\nUse `Ctrl + Shift + L` para edição em múltiplas linhas. Pressione `Esc` para encerrar.\n\n![Editar código pode ser desafiador às vezes, mas o VS Code oferece ferramentas úteis para tornar o processo mais ágil, como a edição em múltiplas linhas.](./images/multiline.png){#fig-multi-line}\n\n## Formatação automática de código\n\nClique com o botão direito em qualquer lugar do código e escolha *Formatar Documento*. Isso ajusta automaticamente indentação, espaçamento e estilo.\n\n## Controle de versão com Git\n\nNo VS Code, um clique rápido em um arquivo listado no painel do Git permite inspecionar instantaneamente as alterações no código (@fig-github). Ao abrir o arquivo, uma tela dividida é exibida, destacando as alterações em verde (edições) e vermelho (revisões), em comparação com a versão anterior do código. Essa funcionalidade facilita o processo de revisão, oferecendo uma maneira intuitiva e eficiente de acompanhar as modificações no ambiente de desenvolvimento.\n\n![O VS Code se integra perfeitamente ao GitHub, tornando-se amigável mesmo para usuários com pouca experiência, exigindo apenas uma curva de aprendizado leve.](./images/githubComparison.png){#fig-github}\n\nO VS Code oferece uma variedade de recursos e extensões para facilitar a resolução de conflitos. Isso inclui ferramentas interativas de mesclagem, comparação de arquivos lado a lado e até suporte nativo a mesclagem em três vias. Podemos gerenciar o controle de versão com Git por meio de simples cliques de botão.\n\n## Exportar banco de dados .json\n\nPara exportar todos os táxons dentro de `./taxon/Mimosa`:\n\n```bash\ntts export --genus Mimosa\n```\n\n![](https://media.giphy.com/media/GKCQ1NTHrsGHaGCu07/giphy.gif)\n\nPara exportar apenas alguns táxons listados em `./input/taxonToImport.csv`, use:\n\n```bash\ntts export --genus Mimosa --load csv\n```\n\nO arquivo gerado será salvo em `./output/` com o nome `${genus}DB.json`.\n\n**Erros podem ocorrer em dois momentos:**\n\n* Durante a **compilação (TS)**: como propriedades incorretas (ex: `ractole` em vez de `bracteole`)\n* Durante a **execução (JS)**: como regras de negócio violadas (ex: `min = 5` e `max = 3`)\n\nSobre os erros de compilação, por exemplo, dois problemas foram encontrados nos arquivos `Mimosa_test.ts` e `Mimosa_test2.ts` durante a tentativa de exportar o banco de dados de *Mimosa* (@fig-compilationEr). No script `Mimosa_test.ts`, foi detectada uma propriedade não declarada para a face adaxial do folíolo. Já no script `Mimosa_test2.ts`, a classe `ractole` foi listada como uma propriedade da flor, mas a mensagem de erro sugere a correção para `bracteole`. Veja abaixo:\n\n![Erros ocorridos durante o processo de transpilação de arquivos .ts para .js decorrem de violações de regras de sintaxe estabelecidas ou inconsistências de tipos no código TypeScript. Essas violações incluem erros de sintaxe, tipagem incorreta ou uso inadequado de recursos da linguagem TypeScript. Cada mensagem de erro fornece detalhes específicos que ajudam na identificação e resolução do problema encontrado.](./images/exportCompilationError.png){#fig-compilationEr}\n\nAlém disso, erros podem ser capturados durante a fase de execução. No exemplo abaixo, o comprimento de uma estípula foi definido com valor mínimo igual a `5` e máximo igual a `3`, utilizando o método `.setHeightMinMax()` (@fig-executionEr). Esse tipo de erro não é detectado na compilação, pois o tipo (`number`) está correto, mas, durante a execução, uma mensagem no terminal informa que \"a altura mínima deve ser menor que a altura máxima\". Veja abaixo:\n\n![Erros derivados da compilação de arquivos .js evitam erros em tempo de execução, aplicando as regras de negócio definidas em cada método de classe. Neste exemplo, apesar de não haver violação de tipo de dado — já que a função aceita dois números —, existe uma regra de negócio para validar se o valor mínimo é realmente menor que o valor máximo. Esse processo evita erros de inserção de dados, garantindo conformidade com as regras definidas.](./images/exportExecutionError.png){#fig-executionEr}\n\n### Conjunto de dados de fontes\n\nPodemos criar um conjunto de dados consolidado que reúne todas as fontes em uma estrutura JSON achatada, facilitando o acesso por meio de consultas. Para gerar um banco de dados contendo apenas as fontes relacionadas aos táxons, execute o seguinte comando:\n\n```bash\ntts exportSources --genus Mimosa\n```\n\nEste conjunto de dados inclui um índice que se relaciona com o banco de dados principal e fornece o caminho completo da chave onde cada fonte está localizada:\n\n```ts\n[{\n    index: 7,\n    path: 'flower.corolla.trichomes.stellate.lepidote',\n    source: {\n      sourceType: 'article',\n      authorship: 'Jordão, L.S.B. & Morim, M.P. & Baumgratz, J.F.A.',\n      year: 2020,\n      title: 'Trichomes in *Mimosa* (Leguminosae): Towards a characterization and a terminology standardization',\n      journal: 'Flora',\n      number: 272,\n      pages: 151702,\n      figure: '4I',\n      obtainingMethod: 'scanningElectronMicroscope'\n    }\n}]\n```\n\n## Exportar banco de dados .csv\n\nNo TTS, existe um método conveniente para exportar um banco de dados convertido em JSON para o formato CSV usando o comando `exportToCsv`. Semelhante ao comando `export`, ele gera uma saída em CSV. De fato, abrir um arquivo CSV em uma planilha é bastante útil. No entanto, é importante observar que essa conversão implica em perda de estrutura dos dados. A primeira linha do CSV será composta por todos os caminhos JSON, preservando a hierarquia aninhada, mas arrays de elementos serão tratados como strings com a mesma sintaxe JSON. Para transformações mais avançadas, é possível explorar métodos adicionais no [Json2csv](https://mircozeiss.com/json2csv/).\n\n## Navegando no banco de dados\n\nUtilizando a extensão JSON Grid Viewer ([https://github.com/dutchigor/json-grid-viewer](https://github.com/dutchigor/json-grid-viewer)), disponível no Visual Studio Marketplace ([https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/)), podemos explorar facilmente a estrutura detalhada de configurações JSON (@fig-jsonView).\n\n![O pacote json-grid-viewer é altamente útil, pois fornece uma visualização amigável de arquivos JSON. Seu foco principal é visualizar objetos e arrays, que são componentes típicos de uma estrutura JSON.](./images/jsonView.png){#fig-jsonView}\n\n## Métodos de consulta\n\nAs técnicas de consulta de dados abrangem uma variedade de métodos adaptados a diferentes necessidades. As consultas básicas baseiam-se em pares chave-valor para recuperação precisa de dados, enquanto as consultas por intervalo são ideais para dados numéricos ou baseados em datas, permitindo a extração dentro de faixas de valores definidas.\n\nOutro tipo de consulta envolve a abordagem de agregação, que permite manipulação avançada de dados, como agrupamento e filtragem encadeada no banco de dados. Isso é possível porque o resultado de uma consulta sempre retorna o documento completo dentro do banco, permitindo encadear novas consultas para realizar múltiplas agregações.\n\n### Consulta por caminho de caractere\n\nUm aspecto essencial das consultas é identificar um caminho JSON que represente propriedades aninhadas em um array de documentos em um banco de dados JSON. Neste caso, nosso objetivo é navegar pela árvore de caracteres para recuperar propriedades dos táxons.\n\nVamos definir \"propriedade\" como um caminho de chaves dentro da árvore de caracteres. Quando queremos recuperar uma propriedade do banco, buscamos seu caminho JSON correspondente, como `trichomes.stellate`. Esta busca retorna os índices dos documentos onde a propriedade foi encontrada e os caminhos em que ela se localiza, usando o comando `findProperty`:\n\n```bash\ntts findProperty --property trichomes.stellate --genus Mimosa\n```\n\nO resultado deve ser similar a:\n\n```ts\n[\n  { specificEpithet: 'furfuraceae', index: 5, paths: [ 'flower.corolla' ] },\n  { specificEpithet: 'myuros', index: 6, paths: [ 'stems' ] },\n  {\n    specificEpithet: 'schomburgkii',\n    index: 7,\n    paths: [ \n        'leaf.bipinnate.pinnae.leaflet.abaxial',\n        'flower.corolla' \n    ]\n  }\n]\n```\n\nNo exemplo acima, tricomas estrelados foram identificados na corola de *M. furfuraceae*, nos caules de *M. myuros* e tanto na face abaxial do folíolo quanto na corola de *M. schomburgkii*.\n\n### Consulta flexível chave-valor\n\nOutra abordagem de consulta é a chave-valor flexível. Esse método permite buscas dentro de caminhos JSON usando valores específicos que atendam a condições definidas.\n\nPara iniciar consultas em uma exportação do projeto TTS, execute os procedimentos fora do diretório do projeto. Comece criando um diretório separado (ex: `flex-json-searches`) e abra-o em um IDE como o VS Code.\n\nPara realizar consultas JSON flexíveis, instale os módulos `flex-json-searcher` ([https://github.com/vicentecalfo/flex-json-searcher](https://github.com/vicentecalfo/flex-json-searcher)) e `fs`. No terminal, execute:\n\n```bash\nnpm install fs\nnpm install flex-json-searcher\n```\n\nDepois, crie um arquivo `script.js` e insira o seguinte código:\n\n```ts\n// script.js\nconst fs = require('fs')\nconst { FJS } = require('flex-json-searcher')\n\nconst filePath = './output/MimosaDB.json'\n\nfs.readFile(filePath, 'utf8', async (err, data) => {\n  if (err) {\n    console.error('Erro ao ler o arquivo:', err)\n    return\n  }\n  \n  try {\n    const mimosaDB = JSON.parse(data)\n    const fjs = new FJS(mimosaDB)\n    const query = { 'flower.merism': { $eq: \"3-merous\" } }\n\n    const output = await fjs.search(query)\n    const specificEpithets = output.result.map(item => item.specificEpithet)\n    console.log('Espécies encontradas:', specificEpithets)\n  } catch (error) {\n    console.error('Erro durante o processamento:', error)\n  }\n})\n```\n\nExecute com:\n\n```bash\nnode script\n```\n\nResultado esperado:\n\n```\nEspécies encontradas: [\n  'afranioi',\n  'caesalpiniifolia',\n  'ceratonia var pseudo-obovata',\n  'robsonii'\n]\n```\n\nDurante a busca, `*.` pode ser usado para localizar caminhos JSON específicos associados a condições.\n\n### Consulta por intervalo\n\nA consulta por intervalo permite buscar dados dentro de faixas específicas de valores, como datas, valores numéricos ou outros atributos.\n\nInstale os módulos:\n\n```bash\nnpm install fs\nnpm install flex-json-searcher\n```\n\nCrie o arquivo `script2.js`:\n\n```ts\n// script2.js\nconst fs = require('fs')\nconst { FJS } = require('flex-json-searcher')\n\nconst filePath = './output/MimosaDB.json'\n\nfs.readFile(filePath, 'utf8', async (err, data) => {\n  if (err) {\n    console.error('Erro ao ler o arquivo:', err)\n    return\n  }\n  \n  try {\n    const mimosaDB = JSON.parse(data)\n    const fjs = new FJS(mimosaDB)\n    const query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $gt: \"15\" } }\n    const output = await fjs.search(query)\n\n    const specificEpithets = output.result.map(item => item.specificEpithet)\n    console.log('Espécies encontradas:', specificEpithets)\n\n  } catch (error) {\n    console.error('Erro durante o processamento:', error)\n  }\n})\n```\n\nExecute com:\n\n```bash\nnode script2\n```\n\nResultado:\n\n```\nEspécies encontradas: [\n  'bimucronata',\n  'bocainae',\n  'dryandroides var. dryandroides',\n  'elliptica',\n  'invisa var. macrostachya',\n  'itatiaiensis',\n  'pilulifera var. pseudincana'\n]\n```\n\nPara consultas com condições duplas (ex: maior que 15 e menor que 20), crie `script3.js`:\n\n```js\n// script3.js\nconst fs = require('fs')\nconst { FJS } = require('flex-json-searcher')\n\nconst filePath = './output/MimosaDB.json'\n\nfs.readFile(filePath, 'utf8', async (err, data) => {\n  if (err) {\n    console.error('Erro ao ler o arquivo:', err)\n    return\n  }\n  \n  try {\n    const mimosaDB = JSON.parse(data)\n    const fjs = new FJS(mimosaDB)\n\n    const gt15Query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $gt: \"15\" } }\n    const gt15Output = await fjs.search(gt15Query)\n\n    const fjs2 = new FJS(gt15Output.result)\n    const lt20Query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $lt: \"20\" } }\n    const lt20Output = await fjs2.search(lt20Query)\n\n    const results = lt20Output.result.map(item => item.specificEpithet)\n    console.log('Espécies com entre 15 e 20 pares de folíolos:', results)\n\n  } catch (error) {\n    console.error('Erro durante o processamento:', error)\n  }\n})\n```\n\nExecute com:\n\n```bash\nnode script3\n```\n\nResultado:\n\n```\nEspécies com entre 15 e 20 pares de folíolos:\n [ 'bimucronata', 'itatiaiensis', 'pilulifera var. pseudincana' ]\n```\n\n### Consulta de fontes\n\nPara consultar imagens obtidas por microscópio eletrônico, crie `script4.js`:\n\n```ts\n// script4.js\nconst fs = require('fs')\nconst { FJS } = require('flex-json-searcher')\n\nconst filePath = './output/MimosaSourcesDB.json'\n\nfs.readFile(filePath, 'utf8', async (err, data) => {\n  if (err) {\n    console.error('Erro ao ler o arquivo:', err)\n    return\n  }\n  \n  try {\n    const mimosaSourcesDB = JSON.parse(data)\n    const fjs = new FJS(mimosaSourcesDB)\n    const query = { 'source.obtainingMethod': { $eq: \"photo\" } }\n    const output = await fjs.search(query)\n    console.log(output.result)\n  } catch (error) {\n    console.error('Erro durante o processamento:', error)\n  }\n})\n```\n\nExecute com:\n\n```bash\nnode script4\n```\n\nResultado:\n\n```ts\n[\n  {\n    index: '0',\n    path: '',\n    specificEpithet: 'afranioi',\n    source: {\n      obraPrinceps: 'yes',\n      sourceType: 'article',\n      authorship: 'Jordão, L.S.B. and Morim, M.P. and Simon, M.F., Dutra, V.F. and Baumgratz, J.F.A.',\n      year: 2021,\n      title: 'New Species of *Mimosa* (Leguminosae) from Brazil',\n      journal: 'Systematic Botany',\n      volume: 46,\n      number: 2,\n      pages: '339-351',\n      figure: '3',\n      obtainingMethod: 'photo'\n    }\n  },\n  {\n    index: '17',\n    ...\n  },\n  // ...\n]\n```\n\nAs informações completas de cada fonte estão facilmente acessíveis, como `sourceType` (tipo de fonte), `journal` (periódico), `figure` (figura) e `authorship` (autoria).\n\n### Outras aplicações de consulta\n\nO MongoDB e sua ferramenta complementar, o MongoDB Compass, oferecem capacidades avançadas de consulta (@fig-mongodb). A linguagem de consulta do MongoDB, fortalecida por métodos como `find()` e um conjunto abrangente de operadores de comparação como `$lt` (menor que), `$gt` (maior que) e `$eq` (igual a), permite a filtragem precisa de documentos com base em critérios específicos. O MongoDB Compass, uma interface gráfica para o MongoDB, oferece uma plataforma intuitiva para construir e executar consultas visualmente. Ele simplifica a criação de consultas, a visualização de dados e a otimização, oferecendo uma representação gráfica amigável das estruturas de dados. Aproveitar o poder de consulta do MongoDB juntamente com a interface interativa do Compass permite que os usuários explorem, recuperem e manipulem dados de maneira eficaz em bancos de dados MongoDB.\n\n![O MongoDB Compass oferece uma estrutura robusta para visualizar e investigar bancos de dados orientados a documentos, permitindo consultas poderosas.](./images/mongoMimosaDB.png){#fig-mongodb}","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":false,"output-file":"tutorial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","bibliography":["references.bib"],"theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"tutorial.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}
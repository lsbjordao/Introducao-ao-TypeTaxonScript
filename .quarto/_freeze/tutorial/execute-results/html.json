{
  "hash": "5565dbc6d95244b61af6c119e84df064",
  "result": {
    "engine": "jupyter",
    "markdown": "# Tutorial\n\n## Instalar o Node.js\n\nAntes de começar, certifique-se de que o Node.js está instalado no seu sistema. O Node.js é essencial para executar aplicações JavaScript na sua máquina. Você pode baixá-lo e instalá-lo no site oficial do Node.js: [https://nodejs.org/](https://nodejs.org/).\n\n## Instalar o Visual Studio Code\n\nO Visual Studio Code (VS Code) é um editor de código versátil que oferece uma interface amigável e uma variedade de extensões para melhorar o desenvolvimento. Baixe e instale o VS Code pelo site oficial: [https://code.visualstudio.com/](https://code.visualstudio.com/).\n\n## Clonar o repositório do GitHub no VS Code\n\nPara clonar o repositório do projeto Mimosa para o TTS a partir do GitHub, siga estes passos:\n\n1. No VS Code, abra o *Command Palette* com `Ctrl + Shift + P` (Windows/Linux) ou `Cmd + Shift + P` (macOS).\n2. Digite `Git: Clone` e selecione a opção que aparecer.\n3. Um campo de texto será exibido no topo da janela. Insira a URL do repositório:\n   `https://github.com/lsbjordao/TTS-Mimosa`\n4. Escolha um diretório local onde deseja salvar o repositório.\n\n**Recomendamos fortemente evitar espaços ou caracteres incomuns no caminho escolhido para evitar problemas ao abrir arquivos clicando no terminal do IDE.**\n\n## Abrir o diretório do projeto TTS no VS Code\n\n1. Clique em *Arquivo* no menu superior.\n2. Selecione *Abrir Pasta*.\n3. Navegue até o local onde está o diretório do projeto TTS (ex: TTS-Mimosa).\n4. Selecione o diretório e clique em *Abrir*.\n\n## Instalar o pacote TTS\n\nNo VS Code, abra o terminal e execute o comando na raiz do projeto, onde está o `package.json`:\n\n1. Vá ao menu superior e clique em *Terminal* → *Novo Terminal*.\n2. Digite e execute:\n\n```{bash}\nnpm install -g type-taxon-script\n```\n\nInstale com a flag `-g` para evitar que dependências sejam criadas dentro do diretório do projeto. Caso contrário, será gerada uma pasta `./node_modules` e um arquivo `package.json` localmente.\n\nPara verificar se a instalação foi bem-sucedida, use:\n\n```{bash}\ntts --version\n```\n\nPara ver a ajuda com todos os comandos disponíveis:\n\n```{bash}\ntts --help\n```\n\n## Desinstalar o pacote TTS\n\nPara desinstalar o pacote TTS, use:\n\n```{bash}\nnpm uninstall -g @lsbjordao/type-taxon-script\n```\n\n## Inicializar um projeto TTS\n\nPara iniciar um projeto TTS:\n\n```{bash}\ntts init\n```\n\nEsse comando verifica se há um projeto existente e cria os diretórios obrigatórios `./input` e `./output`, mas **somente** se as pastas `characters` e `taxon` já existirem.\n\n## Descrever um novo táxon\n\nPara criar um novo arquivo `.ts` com a hierarquia completa de caracteres, use:\n\n```{bash}\ntts new --genus Mimosa --species epithet\n```\n\nUm arquivo chamado `Mimosa_epithet.ts` será gerado no diretório `./output`. **Antes de editar**, mova esse arquivo para a pasta `./taxon`, pois o script só funciona corretamente dentro dela. Fora dessa pasta, ocorrerão erros de dependência.\n\n## Importar de um arquivo .csv\n\nTambém é possível importar dados de múltiplos táxons a partir de um `.csv`, com o comando:\n\n```{bash}\ntts import --genus Mimosa\n```\n\nO arquivo `.csv` deve:\n\n* Ser compatível com MS Excel\n* Usar `;` como separador e `\"` como delimitador de texto\n* Ter pelo menos a coluna `specificEpithet`\n* Usar o caminho JSON completo como nome de cada coluna\n\nPara indicar múltiplos estados em uma célula, use:\n\n```{bash}\n['4-merous', '5-merous']\n```\n\nPara características que são objetos-chave (ex: tipos de inflorescência), crie colunas como `inflorescence.capitate` e insira \"yes\" na célula correspondente ao táxon.\n\nOs arquivos `.ts` gerados serão salvos em `./output`, mas devem ser movidos manualmente para `./taxon` para funcionar corretamente.\n\n## Documentação\n\nTodos os elementos do código têm metadados (@fig-tsdoc). Ao passar o cursor sobre eles no VS Code, as informações aparecem em um *popup*.\n\n![Ao passar o cursor sobre um texto em uma IDE como o VS Code, um pop-up exibirá seus metadados.](./images/tsdoc.png){#fig-tsdoc}\n\n## Edição de táxons\n\nPara editar um arquivo `.ts` de espécie:\n\n* Digite `'` ou `\"` após o sinal `=` para ver as opções de atributos (@fig-characters-options)\n* Pressione `Enter` para confirmar\n* O VS Code oferece autocompletar com os estados válidos de cada propriedade\n\n![O VS Code auxilia com sua ferramenta de autocompletar, exibindo todos os estados permitidos para cada propriedade.](./images/characterOptions.png){#fig-characters-options}\n\n## Referência cruzada\n\n* Ao segurar `Ctrl` e clicar em uma classe, o arquivo com a descrição da classe é aberto automaticamente.\n* Também é possível ver onde cada classe é utilizada em outras partes do código.\n* Isso ajuda a navegar rapidamente pela hierarquia de caracteres.\n\n## Edição multilinha\n\nUse `Ctrl + Shift + L` para edição em múltiplas linhas. Pressione `Esc` para encerrar.\n\n## Formatação automática de código\n\nClique com o botão direito em qualquer lugar do código e escolha *Formatar Documento*. Isso ajusta automaticamente indentação, espaçamento e estilo.\n\n## Controle de versão com Git\n\n* Clique em um arquivo listado no painel Git para ver as mudanças\n* VS Code mostra comparações lado a lado com edições em verde e revisões em vermelho\n* Ferramentas como *merge interativo* e comparação de arquivos ajudam na resolução de conflitos\n\n## Exportar banco de dados .json\n\nPara exportar todos os táxons dentro de `./taxon/Mimosa`:\n\n```{bash}\ntts export --genus Mimosa\n```\n\nPara exportar apenas alguns táxons listados em `./input/taxonToImport.csv`, use:\n\n```{bash}\ntts export --genus Mimosa --load csv\n```\n\nO arquivo gerado será salvo em `./output/` com o nome `${genus}DB.json`.\n\n**Erros podem ocorrer em dois momentos:**\n\n* Durante a **compilação (TS)**: como propriedades incorretas (ex: `ractole` em vez de `bracteole`)\n* Durante a **execução (JS)**: como regras de negócio violadas (ex: `min = 5` e `max = 3`)\n\nA compilação garante que o código está sintaticamente correto, enquanto a execução valida regras lógicas e de negócio.\n\n",
    "supporting": [
      "tutorial_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
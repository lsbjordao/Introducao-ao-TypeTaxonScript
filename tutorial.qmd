# Tutorial

## Instalar o Node.js

Antes de começar, certifique-se de que o Node.js está instalado no seu sistema. O Node.js é essencial para executar aplicações JavaScript na sua máquina. Você pode baixá-lo e instalá-lo no site oficial do Node.js: [https://nodejs.org/](https://nodejs.org/).

## Instalar o Visual Studio Code

O Visual Studio Code (VS Code) é um editor de código versátil que oferece uma interface amigável e uma variedade de extensões para melhorar o desenvolvimento. Baixe e instale o VS Code pelo site oficial: [https://code.visualstudio.com/](https://code.visualstudio.com/).

## Clonar o repositório do GitHub no VS Code

Para clonar o repositório do projeto Mimosa para o TTS a partir do GitHub, siga estes passos:

1. No VS Code, abra o *Command Palette* com `Ctrl + Shift + P` (Windows/Linux) ou `Cmd + Shift + P` (macOS).
2. Digite `Git: Clone` e selecione a opção que aparecer.
3. Um campo de texto será exibido no topo da janela. Insira a URL do repositório:
   `https://github.com/lsbjordao/TTS-Mimosa`
4. Escolha um diretório local onde deseja salvar o repositório.

**Recomendamos fortemente evitar espaços ou caracteres incomuns no caminho escolhido para evitar problemas ao abrir arquivos clicando no terminal do IDE.**

## Abrir o diretório do projeto TTS no VS Code

1. Clique em *Arquivo* no menu superior.
2. Selecione *Abrir Pasta*.
3. Navegue até o local onde está o diretório do projeto TTS (ex: TTS-Mimosa).
4. Selecione o diretório e clique em *Abrir*.

## Instalar o pacote TTS

No VS Code, abra o terminal e execute o comando na raiz do projeto, onde está o `package.json`:

1. Vá ao menu superior e clique em *Terminal* → *Novo Terminal*.
2. Digite e execute:

```bash
npm install -g type-taxon-script
```

Instale com a flag `-g` para evitar que dependências sejam criadas dentro do diretório do projeto. Caso contrário, será gerada uma pasta `./node_modules` e um arquivo `package.json` localmente.

Para verificar se a instalação foi bem-sucedida, use:

```bash
tts --version
```

Para ver a ajuda com todos os comandos disponíveis:

```bash
tts --help
```

## Desinstalar o pacote TTS

Para desinstalar o pacote TTS, use:

```bash
npm uninstall -g @lsbjordao/type-taxon-script
```

## Inicializar um projeto TTS

Para iniciar um projeto TTS:

```bash
tts init
```

Esse comando verifica se há um projeto existente e cria os diretórios obrigatórios `./input` e `./output`, mas **somente** se as pastas `characters` e `taxon` já existirem.

## Descrever um novo táxon

Para criar um novo arquivo `.ts` com a hierarquia completa de caracteres, use:

```bash
tts new --genus Mimosa --species epithet
```

Um arquivo chamado `Mimosa_epithet.ts` será gerado no diretório `./output`. **Antes de editar**, mova esse arquivo para a pasta `./taxon`, pois o script só funciona corretamente dentro dela. Fora dessa pasta, ocorrerão erros de dependência.

## Importar de um arquivo .csv

Também é possível importar dados de múltiplos táxons a partir de um `.csv`, com o comando:

```bash
tts import --genus Mimosa
```

O arquivo `.csv` deve:

* Usar `;` como separador e `"` como delimitador de texto
* Ter pelo menos a coluna `specificEpithet`
* Usar o caminho JSON completo como nome de cada coluna

Para indicar múltiplos estados em uma célula, use:

```bash
['4-merous', '5-merous']
```

Para características que são objetos-chave (ex: tipos de inflorescência), crie colunas como `inflorescence.capitate` e insira `yes` na célula correspondente ao táxon.

Os arquivos `.ts` gerados serão salvos em `./output`, mas devem ser movidos manualmente para `./taxon` para funcionar corretamente.

## Documentação

Todos os elementos do código têm metadados (@fig-tsdoc). Ao passar o cursor sobre eles no VS Code, as informações aparecem em um *popup*.

![Ao passar o cursor sobre um texto em uma IDE como o VS Code, um pop-up exibirá seus metadados.](./images/tsdoc.png){#fig-tsdoc}

## Edição de táxons

Para editar um arquivo `.ts` de espécie:

* Digite `'` ou `"` após o sinal `=` para ver as opções de atributos (@fig-characters-options)
* Pressione `Enter` para confirmar
* O VS Code oferece autocompletar com os estados válidos de cada propriedade

![O VS Code auxilia com sua ferramenta de autocompletar, exibindo todos os estados permitidos para cada propriedade.](./images/characterOptions.png){#fig-characters-options}

## Referência cruzada

* Ao segurar `Ctrl` e clicar em uma classe, o arquivo com a descrição da classe é aberto automaticamente.
* Também é possível ver onde cada classe é utilizada em outras partes do código.
* Isso ajuda a navegar rapidamente pela hierarquia de caracteres.

Além disso, temos a capacidade de rastrear onde uma determinada classe está sendo utilizada. Por exemplo, ao procurar por ocorrências do uso de uma classe de caractere, podemos simplesmente inspecionar o nome da classe. Como ilustrado no exemplo, uma galha (`Gall`) é mencionada na descrição de *Mimosa gemmulata* Barneby, e ao clicar sobre ela, podemos abrir rapidamente seu respectivo arquivo (@fig-cross-reference).

![O cruzamento de dependências entre módulos ajuda a identificar rapidamente onde um caractere é invocado, enquanto o VS Code rastreia e exibe com eficiência o uso de cada caractere da árvore de caracteres.](./images/whereClass.png){#fig-cross-reference}

## Edição multilinha

Use `Ctrl + Shift + L` para edição em múltiplas linhas. Pressione `Esc` para encerrar.

![Editar código pode ser desafiador às vezes, mas o VS Code oferece ferramentas úteis para tornar o processo mais ágil, como a edição em múltiplas linhas.](./images/multiline.png){#fig-multi-line}

## Formatação automática de código

Clique com o botão direito em qualquer lugar do código e escolha *Formatar Documento*. Isso ajusta automaticamente indentação, espaçamento e estilo.

## Controle de versão com Git

No VS Code, um clique rápido em um arquivo listado no painel do Git permite inspecionar instantaneamente as alterações no código (@fig-github). Ao abrir o arquivo, uma tela dividida é exibida, destacando as alterações em verde (edições) e vermelho (revisões), em comparação com a versão anterior do código. Essa funcionalidade facilita o processo de revisão, oferecendo uma maneira intuitiva e eficiente de acompanhar as modificações no ambiente de desenvolvimento.

![O VS Code se integra perfeitamente ao GitHub, tornando-se amigável mesmo para usuários com pouca experiência, exigindo apenas uma curva de aprendizado leve.](./images/githubComparison.png){#fig-github}

O VS Code oferece uma variedade de recursos e extensões para facilitar a resolução de conflitos. Isso inclui ferramentas interativas de mesclagem, comparação de arquivos lado a lado e até suporte nativo a mesclagem em três vias. Podemos gerenciar o controle de versão com Git por meio de simples cliques de botão.

## Exportar banco de dados .json

Para exportar todos os táxons dentro de `./taxon/Mimosa`:

```bash
tts export --genus Mimosa
```

![](https://media.giphy.com/media/GKCQ1NTHrsGHaGCu07/giphy.gif)

Para exportar apenas alguns táxons listados em `./input/taxonToImport.csv`, use:

```bash
tts export --genus Mimosa --load csv
```

O arquivo gerado será salvo em `./output/` com o nome `${genus}DB.json`.

**Erros podem ocorrer em dois momentos:**

* Durante a **compilação (TS)**: como propriedades incorretas (ex: `ractole` em vez de `bracteole`)
* Durante a **execução (JS)**: como regras de negócio violadas (ex: `min = 5` e `max = 3`)

Sobre os erros de compilação, por exemplo, dois problemas foram encontrados nos arquivos `Mimosa_test.ts` e `Mimosa_test2.ts` durante a tentativa de exportar o banco de dados de *Mimosa* (@fig-compilationEr). No script `Mimosa_test.ts`, foi detectada uma propriedade não declarada para a face adaxial do folíolo. Já no script `Mimosa_test2.ts`, a classe `ractole` foi listada como uma propriedade da flor, mas a mensagem de erro sugere a correção para `bracteole`. Veja abaixo:

![Erros ocorridos durante o processo de transpilação de arquivos .ts para .js decorrem de violações de regras de sintaxe estabelecidas ou inconsistências de tipos no código TypeScript. Essas violações incluem erros de sintaxe, tipagem incorreta ou uso inadequado de recursos da linguagem TypeScript. Cada mensagem de erro fornece detalhes específicos que ajudam na identificação e resolução do problema encontrado.](./images/exportCompilationError.png){#fig-compilationEr}

Além disso, erros podem ser capturados durante a fase de execução. No exemplo abaixo, o comprimento de uma estípula foi definido com valor mínimo igual a `5` e máximo igual a `3`, utilizando o método `.setHeightMinMax()` (@fig-executionEr). Esse tipo de erro não é detectado na compilação, pois o tipo (`number`) está correto, mas, durante a execução, uma mensagem no terminal informa que "a altura mínima deve ser menor que a altura máxima". Veja abaixo:

![Erros derivados da compilação de arquivos .js evitam erros em tempo de execução, aplicando as regras de negócio definidas em cada método de classe. Neste exemplo, apesar de não haver violação de tipo de dado — já que a função aceita dois números —, existe uma regra de negócio para validar se o valor mínimo é realmente menor que o valor máximo. Esse processo evita erros de inserção de dados, garantindo conformidade com as regras definidas.](./images/exportExecutionError.png){#fig-executionEr}

### Conjunto de dados de fontes

Podemos criar um conjunto de dados consolidado que reúne todas as fontes em uma estrutura JSON achatada, facilitando o acesso por meio de consultas. Para gerar um banco de dados contendo apenas as fontes relacionadas aos táxons, execute o seguinte comando:

```bash
tts exportSources --genus Mimosa
```

Este conjunto de dados inclui um índice que se relaciona com o banco de dados principal e fornece o caminho completo da chave onde cada fonte está localizada:

```ts
[{
    index: 7,
    path: 'flower.corolla.trichomes.stellate.lepidote',
    source: {
      sourceType: 'article',
      authorship: 'Jordão, L.S.B. & Morim, M.P. & Baumgratz, J.F.A.',
      year: 2020,
      title: 'Trichomes in *Mimosa* (Leguminosae): Towards a characterization and a terminology standardization',
      journal: 'Flora',
      number: 272,
      pages: 151702,
      figure: '4I',
      obtainingMethod: 'scanningElectronMicroscope'
    }
}]
```

## Exportar banco de dados .csv

No TTS, existe um método conveniente para exportar um banco de dados convertido em JSON para o formato CSV usando o comando `exportToCsv`. Semelhante ao comando `export`, ele gera uma saída em CSV. De fato, abrir um arquivo CSV em uma planilha é bastante útil. No entanto, é importante observar que essa conversão implica em perda de estrutura dos dados. A primeira linha do CSV será composta por todos os caminhos JSON, preservando a hierarquia aninhada, mas arrays de elementos serão tratados como strings com a mesma sintaxe JSON. Para transformações mais avançadas, é possível explorar métodos adicionais no [Json2csv](https://mircozeiss.com/json2csv/).

## Navegando no banco de dados

Utilizando a extensão JSON Grid Viewer ([https://github.com/dutchigor/json-grid-viewer](https://github.com/dutchigor/json-grid-viewer)), disponível no Visual Studio Marketplace ([https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/)), podemos explorar facilmente a estrutura detalhada de configurações JSON (@fig-jsonView).

![O pacote json-grid-viewer é altamente útil, pois fornece uma visualização amigável de arquivos JSON. Seu foco principal é visualizar objetos e arrays, que são componentes típicos de uma estrutura JSON.](./images/jsonView.png){#fig-jsonView}

## Métodos de consulta

As técnicas de consulta de dados abrangem uma variedade de métodos adaptados a diferentes necessidades. As consultas básicas baseiam-se em pares chave-valor para recuperação precisa de dados, enquanto as consultas por intervalo são ideais para dados numéricos ou baseados em datas, permitindo a extração dentro de faixas de valores definidas.

Outro tipo de consulta envolve a abordagem de agregação, que permite manipulação avançada de dados, como agrupamento e filtragem encadeada no banco de dados. Isso é possível porque o resultado de uma consulta sempre retorna o documento completo dentro do banco, permitindo encadear novas consultas para realizar múltiplas agregações.

### Consulta por caminho de caractere

Um aspecto essencial das consultas é identificar um caminho JSON que represente propriedades aninhadas em um array de documentos em um banco de dados JSON. Neste caso, nosso objetivo é navegar pela árvore de caracteres para recuperar propriedades dos táxons.

Vamos definir "propriedade" como um caminho de chaves dentro da árvore de caracteres. Quando queremos recuperar uma propriedade do banco, buscamos seu caminho JSON correspondente, como `trichomes.stellate`. Esta busca retorna os índices dos documentos onde a propriedade foi encontrada e os caminhos em que ela se localiza, usando o comando `findProperty`:

```bash
tts findProperty --property trichomes.stellate --genus Mimosa
```

O resultado deve ser similar a:

```ts
[
  { specificEpithet: 'furfuraceae', index: 5, paths: [ 'flower.corolla' ] },
  { specificEpithet: 'myuros', index: 6, paths: [ 'stems' ] },
  {
    specificEpithet: 'schomburgkii',
    index: 7,
    paths: [ 
        'leaf.bipinnate.pinnae.leaflet.abaxial',
        'flower.corolla' 
    ]
  }
]
```

No exemplo acima, tricomas estrelados foram identificados na corola de *M. furfuraceae*, nos caules de *M. myuros* e tanto na face abaxial do folíolo quanto na corola de *M. schomburgkii*.

### Consulta flexível chave-valor

Outra abordagem de consulta é a chave-valor flexível. Esse método permite buscas dentro de caminhos JSON usando valores específicos que atendam a condições definidas.

Para iniciar consultas em uma exportação do projeto TTS, execute os procedimentos fora do diretório do projeto. Comece criando um diretório separado (ex: `flex-json-searches`) e abra-o em um IDE como o VS Code.

Para realizar consultas JSON flexíveis, instale os módulos `flex-json-searcher` ([https://github.com/vicentecalfo/flex-json-searcher](https://github.com/vicentecalfo/flex-json-searcher)) e `fs`. No terminal, execute:

```bash
npm install fs
npm install flex-json-searcher
```

Depois, crie um arquivo `script.js` e insira o seguinte código:

```ts
// script.js
const fs = require('fs')
const { FJS } = require('flex-json-searcher')

const filePath = './output/MimosaDB.json'

fs.readFile(filePath, 'utf8', async (err, data) => {
  if (err) {
    console.error('Erro ao ler o arquivo:', err)
    return
  }
  
  try {
    const mimosaDB = JSON.parse(data)
    const fjs = new FJS(mimosaDB)
    const query = { 'flower.merism': { $eq: "3-merous" } }

    const output = await fjs.search(query)
    const specificEpithets = output.result.map(item => item.specificEpithet)
    console.log('Espécies encontradas:', specificEpithets)
  } catch (error) {
    console.error('Erro durante o processamento:', error)
  }
})
```

Execute com:

```bash
node script
```

Resultado esperado:

```
Espécies encontradas: [
  'afranioi',
  'caesalpiniifolia',
  'ceratonia var pseudo-obovata',
  'robsonii'
]
```

Durante a busca, `*.` pode ser usado para localizar caminhos JSON específicos associados a condições.

### Consulta por intervalo

A consulta por intervalo permite buscar dados dentro de faixas específicas de valores, como datas, valores numéricos ou outros atributos.

Instale os módulos:

```bash
npm install fs
npm install flex-json-searcher
```

Crie o arquivo `script2.js`:

```ts
// script2.js
const fs = require('fs')
const { FJS } = require('flex-json-searcher')

const filePath = './output/MimosaDB.json'

fs.readFile(filePath, 'utf8', async (err, data) => {
  if (err) {
    console.error('Erro ao ler o arquivo:', err)
    return
  }
  
  try {
    const mimosaDB = JSON.parse(data)
    const fjs = new FJS(mimosaDB)
    const query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $gt: "15" } }
    const output = await fjs.search(query)

    const specificEpithets = output.result.map(item => item.specificEpithet)
    console.log('Espécies encontradas:', specificEpithets)

  } catch (error) {
    console.error('Erro durante o processamento:', error)
  }
})
```

Execute com:

```bash
node script2
```

Resultado:

```
Espécies encontradas: [
  'bimucronata',
  'bocainae',
  'dryandroides var. dryandroides',
  'elliptica',
  'invisa var. macrostachya',
  'itatiaiensis',
  'pilulifera var. pseudincana'
]
```

Para consultas com condições duplas (ex: maior que 15 e menor que 20), crie `script3.js`:

```js
// script3.js
const fs = require('fs')
const { FJS } = require('flex-json-searcher')

const filePath = './output/MimosaDB.json'

fs.readFile(filePath, 'utf8', async (err, data) => {
  if (err) {
    console.error('Erro ao ler o arquivo:', err)
    return
  }
  
  try {
    const mimosaDB = JSON.parse(data)
    const fjs = new FJS(mimosaDB)

    const gt15Query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $gt: "15" } }
    const gt15Output = await fjs.search(gt15Query)

    const fjs2 = new FJS(gt15Output.result)
    const lt20Query = { 'leaf.bipinnate.pinnae.leaflet.numberOfPairs.min': { $lt: "20" } }
    const lt20Output = await fjs2.search(lt20Query)

    const results = lt20Output.result.map(item => item.specificEpithet)
    console.log('Espécies com entre 15 e 20 pares de folíolos:', results)

  } catch (error) {
    console.error('Erro durante o processamento:', error)
  }
})
```

Execute com:

```bash
node script3
```

Resultado:

```
Espécies com entre 15 e 20 pares de folíolos:
 [ 'bimucronata', 'itatiaiensis', 'pilulifera var. pseudincana' ]
```

### Consulta de fontes

Para consultar imagens obtidas por microscópio eletrônico, crie `script4.js`:

```ts
// script4.js
const fs = require('fs')
const { FJS } = require('flex-json-searcher')

const filePath = './output/MimosaSourcesDB.json'

fs.readFile(filePath, 'utf8', async (err, data) => {
  if (err) {
    console.error('Erro ao ler o arquivo:', err)
    return
  }
  
  try {
    const mimosaSourcesDB = JSON.parse(data)
    const fjs = new FJS(mimosaSourcesDB)
    const query = { 'source.obtainingMethod': { $eq: "photo" } }
    const output = await fjs.search(query)
    console.log(output.result)
  } catch (error) {
    console.error('Erro durante o processamento:', error)
  }
})
```

Execute com:

```bash
node script4
```

Resultado:

```ts
[
  {
    index: '0',
    path: '',
    specificEpithet: 'afranioi',
    source: {
      obraPrinceps: 'yes',
      sourceType: 'article',
      authorship: 'Jordão, L.S.B. and Morim, M.P. and Simon, M.F., Dutra, V.F. and Baumgratz, J.F.A.',
      year: 2021,
      title: 'New Species of *Mimosa* (Leguminosae) from Brazil',
      journal: 'Systematic Botany',
      volume: 46,
      number: 2,
      pages: '339-351',
      figure: '3',
      obtainingMethod: 'photo'
    }
  },
  {
    index: '17',
    ...
  },
  // ...
]
```

As informações completas de cada fonte estão facilmente acessíveis, como `sourceType` (tipo de fonte), `journal` (periódico), `figure` (figura) e `authorship` (autoria).

### Outras aplicações de consulta

O MongoDB e sua ferramenta complementar, o MongoDB Compass, oferecem capacidades avançadas de consulta (@fig-mongodb). A linguagem de consulta do MongoDB, fortalecida por métodos como `find()` e um conjunto abrangente de operadores de comparação como `$lt` (menor que), `$gt` (maior que) e `$eq` (igual a), permite a filtragem precisa de documentos com base em critérios específicos. O MongoDB Compass, uma interface gráfica para o MongoDB, oferece uma plataforma intuitiva para construir e executar consultas visualmente. Ele simplifica a criação de consultas, a visualização de dados e a otimização, oferecendo uma representação gráfica amigável das estruturas de dados. Aproveitar o poder de consulta do MongoDB juntamente com a interface interativa do Compass permite que os usuários explorem, recuperem e manipulem dados de maneira eficaz em bancos de dados MongoDB.

![O MongoDB Compass oferece uma estrutura robusta para visualizar e investigar bancos de dados orientados a documentos, permitindo consultas poderosas.](./images/mongoMimosaDB.png){#fig-mongodb}